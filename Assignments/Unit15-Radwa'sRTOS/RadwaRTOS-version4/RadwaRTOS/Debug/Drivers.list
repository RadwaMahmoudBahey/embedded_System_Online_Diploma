
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000105c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800118c  0800118c  0001118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011c8  080011c8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080011c8  080011c8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011c8  080011c8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011c8  080011c8  000111c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011cc  080011cc  000111cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080011d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000008  080011d8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  080011d8  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f3d  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000aaf  00000000  00000000  00023f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ce8  00000000  00000000  00024a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000240  00000000  00000000  00025708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001e8  00000000  00000000  00025948  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000373c  00000000  00000000  00025b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002532  00000000  00000000  0002926c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000101e7  00000000  00000000  0002b79e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003b985  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000720  00000000  00000000  0003ba00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08001174 	.word	0x08001174

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08001174 	.word	0x08001174

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <FIFO_INIT>:
}



/* *********************************** */
Status FIFO_INIT (FIFO_T* fifo,elementType* buff , unsigned int length){
 8000184:	b480      	push	{r7}
 8000186:	b085      	sub	sp, #20
 8000188:	af00      	add	r7, sp, #0
 800018a:	60f8      	str	r0, [r7, #12]
 800018c:	60b9      	str	r1, [r7, #8]
 800018e:	607a      	str	r2, [r7, #4]

	if(!buff )
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d101      	bne.n	800019a <FIFO_INIT+0x16>
		return FIFO_NULL;
 8000196:	2303      	movs	r3, #3
 8000198:	e011      	b.n	80001be <FIFO_INIT+0x3a>

	fifo->base = buff ;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	68ba      	ldr	r2, [r7, #8]
 800019e:	601a      	str	r2, [r3, #0]
	fifo->head = fifo->base ;
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	681a      	ldr	r2, [r3, #0]
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	611a      	str	r2, [r3, #16]
	fifo->count=0;
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	2200      	movs	r2, #0
 80001ba:	60da      	str	r2, [r3, #12]

	return FIFO_NoERROR;
 80001bc:	2300      	movs	r3, #0

}
 80001be:	4618      	mov	r0, r3
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <FIFO_enqueue>:





Status FIFO_enqueue (FIFO_T* fifo,elementType item){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d003      	beq.n	80001e2 <FIFO_enqueue+0x1a>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	691b      	ldr	r3, [r3, #16]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d101      	bne.n	80001e6 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 80001e2:	2303      	movs	r3, #3
 80001e4:	e02d      	b.n	8000242 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->count == fifo->length))
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	685a      	ldr	r2, [r3, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d107      	bne.n	8000202 <FIFO_enqueue+0x3a>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	68da      	ldr	r2, [r3, #12]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	691b      	ldr	r3, [r3, #16]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d101      	bne.n	8000202 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 80001fe:	2301      	movs	r3, #1
 8000200:	e01f      	b.n	8000242 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	683a      	ldr	r2, [r7, #0]
 8000208:	601a      	str	r2, [r3, #0]
	fifo->count++;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	1c5a      	adds	r2, r3, #1
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	60da      	str	r2, [r3, #12]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	6812      	ldr	r2, [r2, #0]
 800021c:	4611      	mov	r1, r2
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	6912      	ldr	r2, [r2, #16]
 8000222:	0092      	lsls	r2, r2, #2
 8000224:	440a      	add	r2, r1
 8000226:	3a04      	subs	r2, #4
 8000228:	4293      	cmp	r3, r2
 800022a:	d104      	bne.n	8000236 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	e004      	b.n	8000240 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	1d1a      	adds	r2, r3, #4
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	609a      	str	r2, [r3, #8]

	return FIFO_NoERROR;
 8000240:	2300      	movs	r3, #0


}
 8000242:	4618      	mov	r0, r3
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <FIFO_dequeue>:
/* *********************************** */




Status FIFO_dequeue (FIFO_T* fifo, elementType* item){
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d003      	beq.n	8000266 <FIFO_dequeue+0x1a>
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d101      	bne.n	800026a <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000266:	2303      	movs	r3, #3
 8000268:	e028      	b.n	80002bc <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	685a      	ldr	r2, [r3, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	429a      	cmp	r2, r3
 8000274:	d101      	bne.n	800027a <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 8000276:	2302      	movs	r3, #2
 8000278:	e020      	b.n	80002bc <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	601a      	str	r2, [r3, #0]
	fifo->count--;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	1e5a      	subs	r2, r3, #1
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	60da      	str	r2, [r3, #12]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	6812      	ldr	r2, [r2, #0]
 8000296:	4611      	mov	r1, r2
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6912      	ldr	r2, [r2, #16]
 800029c:	0092      	lsls	r2, r2, #2
 800029e:	440a      	add	r2, r1
 80002a0:	3a04      	subs	r2, #4
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d104      	bne.n	80002b0 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	e004      	b.n	80002ba <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	1d1a      	adds	r2, r3, #4
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	605a      	str	r2, [r3, #4]

	return FIFO_NoERROR;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
	...

080002c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db0a      	blt.n	80002f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	490c      	ldr	r1, [pc, #48]	; (8000314 <__NVIC_SetPriority+0x4c>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	0152      	lsls	r2, r2, #5
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f0:	e00a      	b.n	8000308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <__NVIC_SetPriority+0x50>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	3b04      	subs	r3, #4
 8000300:	0152      	lsls	r2, r2, #5
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	440b      	add	r3, r1
 8000306:	761a      	strb	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3b01      	subs	r3, #1
 8000328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800032c:	d301      	bcc.n	8000332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800032e:	2301      	movs	r3, #1
 8000330:	e00f      	b.n	8000352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <SysTick_Config+0x40>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800033a:	2107      	movs	r1, #7
 800033c:	f04f 30ff 	mov.w	r0, #4294967295
 8000340:	f7ff ffc2 	bl	80002c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <SysTick_Config+0x40>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <SysTick_Config+0x40>)
 800034c:	2207      	movs	r2, #7
 800034e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	e000e010 	.word	0xe000e010

08000360 <HW_init>:

#include "CortexMX_porting.h"


void HW_init()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	//	1 count -> 0.125 us
	//	X count -> 1 ms
	//	X = 8000 Count

	//setting pendsv prioirty ==systick priority
	NVIC_SetPriority(PendSV_IRQn , 15);
 8000364:	210f      	movs	r1, #15
 8000366:	f06f 0001 	mvn.w	r0, #1
 800036a:	f7ff ffad 	bl	80002c8 <__NVIC_SetPriority>

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}

08000372 <SVC_Handler>:


__attribute ((naked))void SVC_Handler (void)
{
	__asm volatile("tst lr ,#0x4 \n\t"
 8000372:	f01e 0f04 	tst.w	lr, #4
 8000376:	bf0c      	ite	eq
 8000378:	f3ef 8008 	mrseq	r0, MSP
 800037c:	f3ef 8009 	mrsne	r0, PSP
 8000380:	f000 ba40 	b.w	8000804 <OS_SVC>
			"ITE EQ \n\t"
			"mrseq r0, MSP \n\t"
			"mrsne r0 , PSP \n\t"
			"B OS_SVC");
}
 8000384:	bf00      	nop
	...

08000388 <trigger_OS_PendSV>:


void trigger_OS_PendSV(){
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <trigger_OS_PendSV+0x18>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	4a03      	ldr	r2, [pc, #12]	; (80003a0 <trigger_OS_PendSV+0x18>)
 8000392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000396:	6053      	str	r3, [r2, #4]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <Start_Ticker>:

void Start_Ticker(){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	//	8 MHZ
	//	1 count -> 0.125 us
	//	X count -> 1 ms
	//	X = 8000 Count

	SysTick_Config(8000);
 80003a8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80003ac:	f7ff ffb6 	bl	800031c <SysTick_Config>

}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <BusFault_Handler>:

void BusFault_Handler(){
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
	while(1);
 80003b8:	e7fe      	b.n	80003b8 <BusFault_Handler+0x4>

080003ba <MemManage_Handler>:
}


void MemManage_Handler(){
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
	while(1);
 80003be:	e7fe      	b.n	80003be <MemManage_Handler+0x4>

080003c0 <UsageFault_Handler>:
}


void UsageFault_Handler(){
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	while(1);
 80003c4:	e7fe      	b.n	80003c4 <UsageFault_Handler+0x4>

080003c6 <HardFault_Handler>:
}


void HardFault_Handler(){
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
	while(1);
 80003ca:	e7fe      	b.n	80003ca <HardFault_Handler+0x4>

080003cc <RadwaRTOS_CREATE_TASK_STACK>:



void bubble_sort();

void RadwaRTOS_CREATE_TASK_STACK(Taskref* task){
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	 * r0
	 *  save from r5 >> r11 manually
	 */

	//initializing all:
	task->Current_PSP = task->S_PSP_Task ;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	461a      	mov	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	60da      	str	r2, [r3, #12]
	//xpsr

	*(task->Current_PSP) = 0x01000000;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003e6:	601a      	str	r2, [r3, #0]
	task->Current_PSP-- ;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	1f1a      	subs	r2, r3, #4
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	60da      	str	r2, [r3, #12]

	//pc
	*(task->Current_PSP) = task->task_entry;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	601a      	str	r2, [r3, #0]
	task->Current_PSP-- ;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	1f1a      	subs	r2, r3, #4
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	60da      	str	r2, [r3, #12]

	//LR
	*(task->Current_PSP) = 0xFFFFFFFD;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	f06f 0202 	mvn.w	r2, #2
 800040e:	601a      	str	r2, [r3, #0]


	//rest of the 13 registers: all initialized to 0

	for (int i =0 ; i<13 ;i++){
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e00b      	b.n	800042e <RadwaRTOS_CREATE_TASK_STACK+0x62>
		task->Current_PSP-- ;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	1f1a      	subs	r2, r3, #4
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	60da      	str	r2, [r3, #12]
		*(task->Current_PSP) = 0;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
	for (int i =0 ; i<13 ;i++){
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	3301      	adds	r3, #1
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b0c      	cmp	r3, #12
 8000432:	ddf0      	ble.n	8000416 <RadwaRTOS_CREATE_TASK_STACK+0x4a>
	}


}
 8000434:	bf00      	nop
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
	...

08000440 <RadwaRTOS_CREATE_TASK>:


RadwaRTOS_error RadwaRTOS_CREATE_TASK(Taskref* task){
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]

	RadwaRTOS_error error = no_error;
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]

	task->S_PSP_Task = OS_control.PSP_Locator;
 800044c:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <RadwaRTOS_CREATE_TASK+0x74>)
 800044e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	605a      	str	r2, [r3, #4]
	task->E_PSP_Task =task->S_PSP_Task - task->stack_size ;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	1ad2      	subs	r2, r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]

	if ((task->E_PSP_Task) < &_eheap  ) {
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	461a      	mov	r2, r3
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <RadwaRTOS_CREATE_TASK+0x78>)
 800046c:	429a      	cmp	r2, r3
 800046e:	d201      	bcs.n	8000474 <RadwaRTOS_CREATE_TASK+0x34>
		return Task_Exceeded_Stack_size;
 8000470:	2302      	movs	r3, #2
 8000472:	e01b      	b.n	80004ac <RadwaRTOS_CREATE_TASK+0x6c>
	}
	OS_control.PSP_Locator = task->E_PSP_Task -8;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	3b08      	subs	r3, #8
 800047a:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <RadwaRTOS_CREATE_TASK+0x74>)
 800047c:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//create task frame
	RadwaRTOS_CREATE_TASK_STACK(task);
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f7ff ffa3 	bl	80003cc <RadwaRTOS_CREATE_TASK_STACK>


	//update the tasks table , active tasks:
	OS_control.Task_table[OS_control.ActiveTasks_Count] = task;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <RadwaRTOS_CREATE_TASK+0x74>)
 8000488:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800048c:	4909      	ldr	r1, [pc, #36]	; (80004b4 <RadwaRTOS_CREATE_TASK+0x74>)
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_control.ActiveTasks_Count++;
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <RadwaRTOS_CREATE_TASK+0x74>)
 8000496:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800049a:	3301      	adds	r3, #1
 800049c:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <RadwaRTOS_CREATE_TASK+0x74>)
 800049e:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	// task state >>> suspend:
	task->TaskState = Suspend;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2200      	movs	r2, #0
 80004a6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	return error;
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000030 	.word	0x20000030
 80004b8:	200007f8 	.word	0x200007f8

080004bc <RadwaRTOS_CREATE_MAIN_STACK>:




void RadwaRTOS_CREATE_MAIN_STACK(void){
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	OS_control.S_MSP_Task = &_estack ;
 80004c0:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <RadwaRTOS_CREATE_MAIN_STACK+0x34>)
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <RadwaRTOS_CREATE_MAIN_STACK+0x38>)
 80004c4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_control.E_MSP_Task  = OS_control.S_MSP_Task  - MainStack_Size ;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <RadwaRTOS_CREATE_MAIN_STACK+0x38>)
 80004ca:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80004ce:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <RadwaRTOS_CREATE_MAIN_STACK+0x38>)
 80004d4:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_control.PSP_Locator = OS_control.E_MSP_Task -8;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <RadwaRTOS_CREATE_MAIN_STACK+0x38>)
 80004da:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80004de:	3b08      	subs	r3, #8
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <RadwaRTOS_CREATE_MAIN_STACK+0x38>)
 80004e2:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20002800 	.word	0x20002800
 80004f4:	20000030 	.word	0x20000030

080004f8 <RadwaRTOS_IDLE_TASK>:


void RadwaRTOS_IDLE_TASK(void){
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

	while(1){
		Idle_LED ^= 1;
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <RadwaRTOS_IDLE_TASK+0x18>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b02      	ldr	r3, [pc, #8]	; (8000510 <RadwaRTOS_IDLE_TASK+0x18>)
 8000508:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 800050a:	bf20      	wfe
		Idle_LED ^= 1;
 800050c:	e7f6      	b.n	80004fc <RadwaRTOS_IDLE_TASK+0x4>
 800050e:	bf00      	nop
 8000510:	2000002c 	.word	0x2000002c

08000514 <RadwaRTOS_CREATE_IDLE_TASK>:
	}
}
RadwaRTOS_error RadwaRTOS_CREATE_IDLE_TASK(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0

	RadwaRTOS_error error = no_error;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
	Idle_task.Priority = 255;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <RadwaRTOS_CREATE_IDLE_TASK+0x44>)
 8000520:	22ff      	movs	r2, #255	; 0xff
 8000522:	741a      	strb	r2, [r3, #16]
	strcpy(Idle_task.Task_name , "Idle_Task");
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <RadwaRTOS_CREATE_IDLE_TASK+0x48>)
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <RadwaRTOS_CREATE_IDLE_TASK+0x4c>)
 8000528:	ca07      	ldmia	r2, {r0, r1, r2}
 800052a:	c303      	stmia	r3!, {r0, r1}
 800052c:	801a      	strh	r2, [r3, #0]
	Idle_task.task_entry = RadwaRTOS_IDLE_TASK;
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <RadwaRTOS_CREATE_IDLE_TASK+0x44>)
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <RadwaRTOS_CREATE_IDLE_TASK+0x50>)
 8000532:	615a      	str	r2, [r3, #20]
	Idle_task.stack_size = 300;
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <RadwaRTOS_CREATE_IDLE_TASK+0x44>)
 8000536:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800053a:	601a      	str	r2, [r3, #0]


	// create idle task
	error += RadwaRTOS_CREATE_TASK(&Idle_task);
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <RadwaRTOS_CREATE_IDLE_TASK+0x44>)
 800053e:	f7ff ff7f 	bl	8000440 <RadwaRTOS_CREATE_TASK>
 8000542:	4603      	mov	r3, r0
 8000544:	461a      	mov	r2, r3
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4413      	add	r3, r2
 800054a:	71fb      	strb	r3, [r7, #7]

	return error;
 800054c:	79fb      	ldrb	r3, [r7, #7]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000384 	.word	0x20000384
 800055c:	2000039c 	.word	0x2000039c
 8000560:	0800118c 	.word	0x0800118c
 8000564:	080004f9 	.word	0x080004f9

08000568 <RadwaRTOS_Init>:


RadwaRTOS_error RadwaRTOS_Init(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	RadwaRTOS_error error = no_error;
 800056e:	2300      	movs	r3, #0
 8000570:	71fb      	strb	r3, [r7, #7]

	//1st : OS state >> suspend
	OS_control.OS_State = OS_Suspend ;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <RadwaRTOS_Init+0x44>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//2nd : initialize the main stack
	RadwaRTOS_CREATE_MAIN_STACK();
 800057a:	f7ff ff9f 	bl	80004bc <RadwaRTOS_CREATE_MAIN_STACK>

	///3rd : Create Ready Queue
	if(FIFO_INIT(&ReadyQueue, Ready_table, 100) != FIFO_NoERROR){
 800057e:	2264      	movs	r2, #100	; 0x64
 8000580:	490b      	ldr	r1, [pc, #44]	; (80005b0 <RadwaRTOS_Init+0x48>)
 8000582:	480c      	ldr	r0, [pc, #48]	; (80005b4 <RadwaRTOS_Init+0x4c>)
 8000584:	f7ff fdfe 	bl	8000184 <FIFO_INIT>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <RadwaRTOS_Init+0x2c>
		error += Ready_Queue_Init_error ;
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	3301      	adds	r3, #1
 8000592:	71fb      	strb	r3, [r7, #7]
	}

	//4th Create IDLE task
	error += RadwaRTOS_CREATE_IDLE_TASK();
 8000594:	f7ff ffbe 	bl	8000514 <RadwaRTOS_CREATE_IDLE_TASK>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4413      	add	r3, r2
 80005a0:	71fb      	strb	r3, [r7, #7]
	return error;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000030 	.word	0x20000030
 80005b0:	200001dc 	.word	0x200001dc
 80005b4:	2000036c 	.word	0x2000036c

080005b8 <OS_SVC_SET>:

int OS_SVC_SET(int SVC_ID){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

	switch(SVC_ID){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d005      	beq.n	80005d2 <OS_SVC_SET+0x1a>
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d005      	beq.n	80005d6 <OS_SVC_SET+0x1e>
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d105      	bne.n	80005da <OS_SVC_SET+0x22>
	case SVC_ActivateTask:
		__asm volatile("SVC #0x00");
 80005ce:	df00      	svc	0
		break;
 80005d0:	e003      	b.n	80005da <OS_SVC_SET+0x22>
	case SVC_TerminateTask:
		__asm volatile("SVC #0x01");
 80005d2:	df01      	svc	1
		break;
 80005d4:	e001      	b.n	80005da <OS_SVC_SET+0x22>
	case SVC_TaskWaitingTime:
		__asm volatile("SVC #0x02");
 80005d6:	df02      	svc	2
		break;
 80005d8:	bf00      	nop
	}


}
 80005da:	bf00      	nop
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
	...

080005e8 <RadwaRTOS_UpdateTask_table>:

void RadwaRTOS_UpdateTask_table(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

	Taskref *temp , *current , *next;
	int i=0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
	//sort the tasks table
	bubble_sort();
 80005f2:	f000 f93d 	bl	8000870 <bubble_sort>


	// free the ready queue
	while(FIFO_dequeue(&ReadyQueue, &temp) != FIFO_EMPTY);
 80005f6:	bf00      	nop
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	482b      	ldr	r0, [pc, #172]	; (80006ac <RadwaRTOS_UpdateTask_table+0xc4>)
 80005fe:	f7ff fe25 	bl	800024c <FIFO_dequeue>
 8000602:	4603      	mov	r3, r0
 8000604:	2b02      	cmp	r3, #2
 8000606:	d1f7      	bne.n	80005f8 <RadwaRTOS_UpdateTask_table+0x10>


	//update the ready queue
	while(i< OS_control.ActiveTasks_Count){
 8000608:	e044      	b.n	8000694 <RadwaRTOS_UpdateTask_table+0xac>
		current = OS_control.Task_table[i];
 800060a:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <RadwaRTOS_UpdateTask_table+0xc8>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000612:	60bb      	str	r3, [r7, #8]
		next = OS_control.Task_table[i+1];
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	4a25      	ldr	r2, [pc, #148]	; (80006b0 <RadwaRTOS_UpdateTask_table+0xc8>)
 800061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061e:	607b      	str	r3, [r7, #4]
		if(current->TaskState != Suspend){
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000626:	2b00      	cmp	r3, #0
 8000628:	d031      	beq.n	800068e <RadwaRTOS_UpdateTask_table+0xa6>
			if(next->TaskState == Suspend){
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000630:	2b00      	cmp	r3, #0
 8000632:	d108      	bne.n	8000646 <RadwaRTOS_UpdateTask_table+0x5e>
				FIFO_enqueue(&ReadyQueue, current);
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	481d      	ldr	r0, [pc, #116]	; (80006ac <RadwaRTOS_UpdateTask_table+0xc4>)
 8000638:	f7ff fdc6 	bl	80001c8 <FIFO_enqueue>
				current->TaskState = Ready;
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	2203      	movs	r2, #3
 8000640:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				break;
 8000644:	e02e      	b.n	80006a4 <RadwaRTOS_UpdateTask_table+0xbc>
			}
			if(next->Priority > current->Priority  ){
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7c1a      	ldrb	r2, [r3, #16]
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	7c1b      	ldrb	r3, [r3, #16]
 800064e:	429a      	cmp	r2, r3
 8000650:	d908      	bls.n	8000664 <RadwaRTOS_UpdateTask_table+0x7c>
				FIFO_enqueue(&ReadyQueue, current);
 8000652:	68b9      	ldr	r1, [r7, #8]
 8000654:	4815      	ldr	r0, [pc, #84]	; (80006ac <RadwaRTOS_UpdateTask_table+0xc4>)
 8000656:	f7ff fdb7 	bl	80001c8 <FIFO_enqueue>
				current->TaskState = Ready;
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	2203      	movs	r2, #3
 800065e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				break;
 8000662:	e01f      	b.n	80006a4 <RadwaRTOS_UpdateTask_table+0xbc>
			}
			else if(next->Priority == current->Priority  ){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7c1a      	ldrb	r2, [r3, #16]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	7c1b      	ldrb	r3, [r3, #16]
 800066c:	429a      	cmp	r2, r3
 800066e:	d108      	bne.n	8000682 <RadwaRTOS_UpdateTask_table+0x9a>
				FIFO_enqueue(&ReadyQueue, current);
 8000670:	68b9      	ldr	r1, [r7, #8]
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <RadwaRTOS_UpdateTask_table+0xc4>)
 8000674:	f7ff fda8 	bl	80001c8 <FIFO_enqueue>
				current->TaskState = Ready;
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	2203      	movs	r2, #3
 800067c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8000680:	e005      	b.n	800068e <RadwaRTOS_UpdateTask_table+0xa6>
			}
			else if(next->Priority < current->Priority ){
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	7c1a      	ldrb	r2, [r3, #16]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	7c1b      	ldrb	r3, [r3, #16]
 800068a:	429a      	cmp	r2, r3
 800068c:	d309      	bcc.n	80006a2 <RadwaRTOS_UpdateTask_table+0xba>
				//error in sorting
				break;
			}
		}

		i++;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
	while(i< OS_control.ActiveTasks_Count){
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <RadwaRTOS_UpdateTask_table+0xc8>)
 8000696:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8b4      	bhi.n	800060a <RadwaRTOS_UpdateTask_table+0x22>
	}

}
 80006a0:	e000      	b.n	80006a4 <RadwaRTOS_UpdateTask_table+0xbc>
				break;
 80006a2:	bf00      	nop
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000036c 	.word	0x2000036c
 80006b0:	20000030 	.word	0x20000030

080006b4 <RadwaRTOS_ACTIVATE_TASK>:


void RadwaRTOS_ACTIVATE_TASK(Taskref* task){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

	task->TaskState = Waiting;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2202      	movs	r2, #2
 80006c0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	OS_SVC_SET(SVC_ActivateTask);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ff77 	bl	80005b8 <OS_SVC_SET>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <RadwaRTOS_TERMINATE_TASK>:


void RadwaRTOS_TERMINATE_TASK(Taskref* task){
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]

	task->TaskState = Suspend;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	OS_SVC_SET(SVC_TerminateTask);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f7ff ff68 	bl	80005b8 <OS_SVC_SET>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <RadwaRTOS_ACQUIRE_MUTEX>:





RadwaRTOS_error RadwaRTOS_ACQUIRE_MUTEX(Mutexref* mutex , Taskref* task){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	if(mutex->Current_Task == NULL){
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d103      	bne.n	800070a <RadwaRTOS_ACQUIRE_MUTEX+0x1a>
		mutex->Current_Task = task;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	e00c      	b.n	8000724 <RadwaRTOS_ACQUIRE_MUTEX+0x34>
	}
	else{
		if(mutex->Next_Task == NULL){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d106      	bne.n	8000720 <RadwaRTOS_ACQUIRE_MUTEX+0x30>
			mutex->Next_Task = task;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	60da      	str	r2, [r3, #12]
			RadwaRTOS_TERMINATE_TASK(task);
 8000718:	6838      	ldr	r0, [r7, #0]
 800071a:	f7ff ffda 	bl	80006d2 <RadwaRTOS_TERMINATE_TASK>
 800071e:	e001      	b.n	8000724 <RadwaRTOS_ACQUIRE_MUTEX+0x34>
		}
		else{
			return Mutex_reached_max_users;
 8000720:	2303      	movs	r3, #3
 8000722:	e000      	b.n	8000726 <RadwaRTOS_ACQUIRE_MUTEX+0x36>
		}
	}
	return no_error;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <RadwaRTOS_RELEASE_MUTEX>:





void RadwaRTOS_RELEASE_MUTEX(Mutexref* mutex){
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	if(mutex->Current_Task != NULL){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00b      	beq.n	8000756 <RadwaRTOS_RELEASE_MUTEX+0x28>
		mutex->Current_Task = mutex->Next_Task ;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	609a      	str	r2, [r3, #8]
		mutex->Next_Task = NULL;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
		RadwaRTOS_ACTIVATE_TASK(mutex->Current_Task);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffaf 	bl	80006b4 <RadwaRTOS_ACTIVATE_TASK>
	}
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <Dispatch_Next_Task>:





void Dispatch_Next_Task(){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	if((ReadyQueue.count ==0) &&( OS_control.Current_task->TaskState != Suspend) ){
 8000764:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <Dispatch_Next_Task+0x98>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d11a      	bne.n	80007a2 <Dispatch_Next_Task+0x42>
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <Dispatch_Next_Task+0x9c>)
 800076e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000772:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000776:	2b00      	cmp	r3, #0
 8000778:	d013      	beq.n	80007a2 <Dispatch_Next_Task+0x42>
		OS_control.Current_task->TaskState = Running;
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <Dispatch_Next_Task+0x9c>)
 800077c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000780:	2201      	movs	r2, #1
 8000782:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		FIFO_enqueue(&ReadyQueue, OS_control.Current_task);
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <Dispatch_Next_Task+0x9c>)
 8000788:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800078c:	4619      	mov	r1, r3
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <Dispatch_Next_Task+0x98>)
 8000790:	f7ff fd1a 	bl	80001c8 <FIFO_enqueue>
		OS_control.Next_task = OS_control.Current_task ;
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <Dispatch_Next_Task+0x9c>)
 8000796:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <Dispatch_Next_Task+0x9c>)
 800079c:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		if((OS_control.Current_task->TaskState != Suspend ) && (OS_control.Current_task->Priority == OS_control.Next_task->Priority)){
			FIFO_enqueue(&ReadyQueue, OS_control.Current_task);
			OS_control.Current_task->TaskState = Ready;
		}
	}
}
 80007a0:	e027      	b.n	80007f2 <Dispatch_Next_Task+0x92>
		FIFO_dequeue(&ReadyQueue, &OS_control.Next_task);
 80007a2:	4917      	ldr	r1, [pc, #92]	; (8000800 <Dispatch_Next_Task+0xa0>)
 80007a4:	4814      	ldr	r0, [pc, #80]	; (80007f8 <Dispatch_Next_Task+0x98>)
 80007a6:	f7ff fd51 	bl	800024c <FIFO_dequeue>
		OS_control.Next_task->TaskState = Running;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <Dispatch_Next_Task+0x9c>)
 80007ac:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007b0:	2201      	movs	r2, #1
 80007b2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		if((OS_control.Current_task->TaskState != Suspend ) && (OS_control.Current_task->Priority == OS_control.Next_task->Priority)){
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <Dispatch_Next_Task+0x9c>)
 80007b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007bc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d016      	beq.n	80007f2 <Dispatch_Next_Task+0x92>
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <Dispatch_Next_Task+0x9c>)
 80007c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ca:	7c1a      	ldrb	r2, [r3, #16]
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <Dispatch_Next_Task+0x9c>)
 80007ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007d2:	7c1b      	ldrb	r3, [r3, #16]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d10c      	bne.n	80007f2 <Dispatch_Next_Task+0x92>
			FIFO_enqueue(&ReadyQueue, OS_control.Current_task);
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <Dispatch_Next_Task+0x9c>)
 80007da:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <Dispatch_Next_Task+0x98>)
 80007e2:	f7ff fcf1 	bl	80001c8 <FIFO_enqueue>
			OS_control.Current_task->TaskState = Ready;
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <Dispatch_Next_Task+0x9c>)
 80007e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ec:	2203      	movs	r2, #3
 80007ee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000036c 	.word	0x2000036c
 80007fc:	20000030 	.word	0x20000030
 8000800:	200001d4 	.word	0x200001d4

08000804 <OS_SVC>:

void OS_SVC(uint32_t *Stack_frame){
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	uint8_t SVC_number = *((uint8_t *)(((uint8_t *)Stack_frame[6]) -2));
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3318      	adds	r3, #24
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3b02      	subs	r3, #2
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	73fb      	strb	r3, [r7, #15]
	switch(SVC_number){
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db1f      	blt.n	800085e <OS_SVC+0x5a>
 800081e:	2b01      	cmp	r3, #1
 8000820:	dd02      	ble.n	8000828 <OS_SVC+0x24>
 8000822:	2b02      	cmp	r3, #2
 8000824:	d017      	beq.n	8000856 <OS_SVC+0x52>
		break;
	case SVC_TaskWaitingTime:
		RadwaRTOS_UpdateTask_table();
		break;
	}
}
 8000826:	e01a      	b.n	800085e <OS_SVC+0x5a>
		RadwaRTOS_UpdateTask_table();
 8000828:	f7ff fede 	bl	80005e8 <RadwaRTOS_UpdateTask_table>
		if(OS_control.OS_State != OS_Suspend){
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <OS_SVC+0x64>)
 800082e:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000832:	2b00      	cmp	r3, #0
 8000834:	d012      	beq.n	800085c <OS_SVC+0x58>
			if (strcmp(OS_control.Current_task->Task_name,"Idle_Task") != 0){
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <OS_SVC+0x64>)
 8000838:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800083c:	3318      	adds	r3, #24
 800083e:	490b      	ldr	r1, [pc, #44]	; (800086c <OS_SVC+0x68>)
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fc95 	bl	8000170 <strcmp>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d007      	beq.n	800085c <OS_SVC+0x58>
				Dispatch_Next_Task();
 800084c:	f7ff ff88 	bl	8000760 <Dispatch_Next_Task>
				trigger_OS_PendSV();
 8000850:	f7ff fd9a 	bl	8000388 <trigger_OS_PendSV>
		break;
 8000854:	e002      	b.n	800085c <OS_SVC+0x58>
		RadwaRTOS_UpdateTask_table();
 8000856:	f7ff fec7 	bl	80005e8 <RadwaRTOS_UpdateTask_table>
		break;
 800085a:	e000      	b.n	800085e <OS_SVC+0x5a>
		break;
 800085c:	bf00      	nop
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000030 	.word	0x20000030
 800086c:	0800118c 	.word	0x0800118c

08000870 <bubble_sort>:



void bubble_sort(){
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
	Taskref *temp = NULL;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
	uint8_t count = (uint8_t)OS_control.ActiveTasks_Count ;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <bubble_sort+0x90>)
 800087c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000880:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0 ; i< (count -1);i++){
 8000882:	2300      	movs	r3, #0
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	e030      	b.n	80008ea <bubble_sort+0x7a>
		for(uint8_t j=0 ; j< (count -i -1);j++){
 8000888:	2300      	movs	r3, #0
 800088a:	73bb      	strb	r3, [r7, #14]
 800088c:	e023      	b.n	80008d6 <bubble_sort+0x66>
			if(OS_control.Task_table[j]->Priority > OS_control.Task_table[j+1]->Priority){
 800088e:	7bbb      	ldrb	r3, [r7, #14]
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <bubble_sort+0x90>)
 8000892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000896:	7c1a      	ldrb	r2, [r3, #16]
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	3301      	adds	r3, #1
 800089c:	4918      	ldr	r1, [pc, #96]	; (8000900 <bubble_sort+0x90>)
 800089e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008a2:	7c1b      	ldrb	r3, [r3, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d913      	bls.n	80008d0 <bubble_sort+0x60>
				temp =OS_control.Task_table[j];
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <bubble_sort+0x90>)
 80008ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b0:	60bb      	str	r3, [r7, #8]
				OS_control.Task_table[j] = OS_control.Task_table[j+1];
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	4911      	ldr	r1, [pc, #68]	; (8000900 <bubble_sort+0x90>)
 80008ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008be:	4910      	ldr	r1, [pc, #64]	; (8000900 <bubble_sort+0x90>)
 80008c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_control.Task_table[j+1] = temp;
 80008c4:	7bbb      	ldrb	r3, [r7, #14]
 80008c6:	3301      	adds	r3, #1
 80008c8:	490d      	ldr	r1, [pc, #52]	; (8000900 <bubble_sort+0x90>)
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t j=0 ; j< (count -i -1);j++){
 80008d0:	7bbb      	ldrb	r3, [r7, #14]
 80008d2:	3301      	adds	r3, #1
 80008d4:	73bb      	strb	r3, [r7, #14]
 80008d6:	7bba      	ldrb	r2, [r7, #14]
 80008d8:	79f9      	ldrb	r1, [r7, #7]
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	1acb      	subs	r3, r1, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	429a      	cmp	r2, r3
 80008e2:	dbd4      	blt.n	800088e <bubble_sort+0x1e>
	for(uint8_t i=0 ; i< (count -1);i++){
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	3301      	adds	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	7bfa      	ldrb	r2, [r7, #15]
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	429a      	cmp	r2, r3
 80008f2:	dbc9      	blt.n	8000888 <bubble_sort+0x18>
			}
		}
	}
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000030 	.word	0x20000030

08000904 <PendSV_Handler>:
__attribute ((naked)) void PendSV_Handler()
{
	//if(OS_control.Current_task != OS_control.Next_task){
	// xpsr , r1 , r0-r3 , pc , lr saved automatically
	//save r4 -r11 manually
	GET_PSP(OS_control.Current_task->Current_PSP);
 8000904:	4b6f      	ldr	r3, [pc, #444]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000906:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800090a:	f3ef 8009 	mrs	r0, PSP
 800090e:	4602      	mov	r2, r0
 8000910:	60da      	str	r2, [r3, #12]



	OS_control.Current_task->Current_PSP-- ;
 8000912:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000914:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	3a04      	subs	r2, #4
 800091c:	60da      	str	r2, [r3, #12]
	__asm volatile("mov %0 , r4" : "=r" (*(OS_control.Current_task->Current_PSP)));
 800091e:	4b69      	ldr	r3, [pc, #420]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000920:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	4622      	mov	r2, r4
 8000928:	601a      	str	r2, [r3, #0]

	OS_control.Current_task->Current_PSP-- ;
 800092a:	4b66      	ldr	r3, [pc, #408]	; (8000ac4 <PendSV_Handler+0x1c0>)
 800092c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000930:	68da      	ldr	r2, [r3, #12]
 8000932:	3a04      	subs	r2, #4
 8000934:	60da      	str	r2, [r3, #12]
	__asm volatile("mov %0 , r5" : "=r" (*(OS_control.Current_task->Current_PSP)));
 8000936:	4b63      	ldr	r3, [pc, #396]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000938:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	462a      	mov	r2, r5
 8000940:	601a      	str	r2, [r3, #0]

	OS_control.Current_task->Current_PSP-- ;
 8000942:	4b60      	ldr	r3, [pc, #384]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000944:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000948:	68da      	ldr	r2, [r3, #12]
 800094a:	3a04      	subs	r2, #4
 800094c:	60da      	str	r2, [r3, #12]
	__asm volatile("mov %0 , r6" : "=r" (*(OS_control.Current_task->Current_PSP)));
 800094e:	4b5d      	ldr	r3, [pc, #372]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000950:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	4632      	mov	r2, r6
 8000958:	601a      	str	r2, [r3, #0]

	OS_control.Current_task->Current_PSP-- ;
 800095a:	4b5a      	ldr	r3, [pc, #360]	; (8000ac4 <PendSV_Handler+0x1c0>)
 800095c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000960:	68da      	ldr	r2, [r3, #12]
 8000962:	3a04      	subs	r2, #4
 8000964:	60da      	str	r2, [r3, #12]
	__asm volatile("mov %0 , r7" : "=r" (*(OS_control.Current_task->Current_PSP)));
 8000966:	4b57      	ldr	r3, [pc, #348]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000968:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	463a      	mov	r2, r7
 8000970:	601a      	str	r2, [r3, #0]

	OS_control.Current_task->Current_PSP-- ;
 8000972:	4b54      	ldr	r3, [pc, #336]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000974:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000978:	68da      	ldr	r2, [r3, #12]
 800097a:	3a04      	subs	r2, #4
 800097c:	60da      	str	r2, [r3, #12]
	__asm volatile("mov %0 , r8" : "=r" (*(OS_control.Current_task->Current_PSP)));
 800097e:	4b51      	ldr	r3, [pc, #324]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000980:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	4642      	mov	r2, r8
 8000988:	601a      	str	r2, [r3, #0]

	OS_control.Current_task->Current_PSP-- ;
 800098a:	4b4e      	ldr	r3, [pc, #312]	; (8000ac4 <PendSV_Handler+0x1c0>)
 800098c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	3a04      	subs	r2, #4
 8000994:	60da      	str	r2, [r3, #12]
	__asm volatile("mov %0 , r9" : "=r" (*(OS_control.Current_task->Current_PSP)));
 8000996:	4b4b      	ldr	r3, [pc, #300]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000998:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	464a      	mov	r2, r9
 80009a0:	601a      	str	r2, [r3, #0]

	OS_control.Current_task->Current_PSP-- ;
 80009a2:	4b48      	ldr	r3, [pc, #288]	; (8000ac4 <PendSV_Handler+0x1c0>)
 80009a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009a8:	68da      	ldr	r2, [r3, #12]
 80009aa:	3a04      	subs	r2, #4
 80009ac:	60da      	str	r2, [r3, #12]
	__asm volatile("mov %0 , r10" : "=r" (*(OS_control.Current_task->Current_PSP)));
 80009ae:	4b45      	ldr	r3, [pc, #276]	; (8000ac4 <PendSV_Handler+0x1c0>)
 80009b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	4652      	mov	r2, sl
 80009b8:	601a      	str	r2, [r3, #0]

	OS_control.Current_task->Current_PSP-- ;
 80009ba:	4b42      	ldr	r3, [pc, #264]	; (8000ac4 <PendSV_Handler+0x1c0>)
 80009bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	3a04      	subs	r2, #4
 80009c4:	60da      	str	r2, [r3, #12]
	__asm volatile("mov %0 , r11" : "=r" (*(OS_control.Current_task->Current_PSP)));
 80009c6:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <PendSV_Handler+0x1c0>)
 80009c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	465a      	mov	r2, fp
 80009d0:	601a      	str	r2, [r3, #0]



	//check if next task != null

	if(OS_control.Next_task != NULL){
 80009d2:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <PendSV_Handler+0x1c0>)
 80009d4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d009      	beq.n	80009f0 <PendSV_Handler+0xec>
		OS_control.Current_task = OS_control.Next_task;
 80009dc:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <PendSV_Handler+0x1c0>)
 80009de:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80009e2:	4a38      	ldr	r2, [pc, #224]	; (8000ac4 <PendSV_Handler+0x1c0>)
 80009e4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_control.Next_task = NULL;
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <PendSV_Handler+0x1c0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	// xpsr , r1 , r0-r3 , pc , lr restored automatically
	//restore r4 -r11 manually


	__asm volatile("mov r11, %0" : : "r" (*(OS_control.Current_task->Current_PSP)));
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <PendSV_Handler+0x1c0>)
 80009f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	469b      	mov	fp, r3
	OS_control.Current_task->Current_PSP++ ;
 80009fc:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <PendSV_Handler+0x1c0>)
 80009fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	3204      	adds	r2, #4
 8000a06:	60da      	str	r2, [r3, #12]


	__asm volatile("mov r10, %0" : : "r" (*(OS_control.Current_task->Current_PSP)));
 8000a08:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a0a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	469a      	mov	sl, r3
	OS_control.Current_task->Current_PSP++ ;
 8000a14:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a16:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a1a:	68da      	ldr	r2, [r3, #12]
 8000a1c:	3204      	adds	r2, #4
 8000a1e:	60da      	str	r2, [r3, #12]


	__asm volatile("mov r9, %0" : : "r" (*(OS_control.Current_task->Current_PSP)));
 8000a20:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a22:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4699      	mov	r9, r3
	OS_control.Current_task->Current_PSP++ ;
 8000a2c:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a2e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	3204      	adds	r2, #4
 8000a36:	60da      	str	r2, [r3, #12]


	__asm volatile("mov r8, %0" : : "r" (*(OS_control.Current_task->Current_PSP)));
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a3a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4698      	mov	r8, r3
	OS_control.Current_task->Current_PSP++ ;
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a46:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	3204      	adds	r2, #4
 8000a4e:	60da      	str	r2, [r3, #12]


	__asm volatile("mov r7, %0" : : "r" (*(OS_control.Current_task->Current_PSP)));
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a52:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	461f      	mov	r7, r3
	OS_control.Current_task->Current_PSP++ ;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a5e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	3204      	adds	r2, #4
 8000a66:	60da      	str	r2, [r3, #12]


	__asm volatile("mov r6, %0" : : "r" (*(OS_control.Current_task->Current_PSP)));
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a6a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	461e      	mov	r6, r3
	OS_control.Current_task->Current_PSP++ ;
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a76:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	3204      	adds	r2, #4
 8000a7e:	60da      	str	r2, [r3, #12]


	__asm volatile("mov r5, %0" : : "r" (*(OS_control.Current_task->Current_PSP)));
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a82:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	461d      	mov	r5, r3
	OS_control.Current_task->Current_PSP++ ;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a8e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	3204      	adds	r2, #4
 8000a96:	60da      	str	r2, [r3, #12]


	__asm volatile("mov r4, %0" : : "r" (*(OS_control.Current_task->Current_PSP)));
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000a9a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	461c      	mov	r4, r3
	OS_control.Current_task->Current_PSP++ ;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000aa6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000aaa:	68da      	ldr	r2, [r3, #12]
 8000aac:	3204      	adds	r2, #4
 8000aae:	60da      	str	r2, [r3, #12]



	//update the psp to the new task

	SET_PSP(OS_control.Current_task->Current_PSP);
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <PendSV_Handler+0x1c0>)
 8000ab2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f380 8809 	msr	PSP, r0
	//exit:
	//}

	__asm volatile("BX LR");
 8000abe:	4770      	bx	lr

}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	20000030 	.word	0x20000030

08000ac8 <RadwaRTOS_Activate_OS>:


void RadwaRTOS_Activate_OS(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	OS_control.OS_State = OS_Running;
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <RadwaRTOS_Activate_OS+0x54>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	OS_control.Current_task = &Idle_task ;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <RadwaRTOS_Activate_OS+0x54>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <RadwaRTOS_Activate_OS+0x58>)
 8000ad8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	RadwaRTOS_ACTIVATE_TASK(&Idle_task);
 8000adc:	4810      	ldr	r0, [pc, #64]	; (8000b20 <RadwaRTOS_Activate_OS+0x58>)
 8000ade:	f7ff fde9 	bl	80006b4 <RadwaRTOS_ACTIVATE_TASK>
	Start_Ticker();
 8000ae2:	f7ff fc5f 	bl	80003a4 <Start_Ticker>
	SET_PSP(OS_control.Current_task->Current_PSP);
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <RadwaRTOS_Activate_OS+0x54>)
 8000ae8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f380 8809 	msr	PSP, r0
	Switch_OS_TO_PSP;
 8000af4:	f3ef 8014 	mrs	r0, CONTROL
 8000af8:	f040 0002 	orr.w	r0, r0, #2
 8000afc:	f380 8814 	msr	CONTROL, r0
	Switch_CPU_Access_TO_UNPRIVILIGED;
 8000b00:	f3ef 8014 	mrs	r0, CONTROL
 8000b04:	f040 0001 	orr.w	r0, r0, #1
 8000b08:	f380 8814 	msr	CONTROL, r0

	//activate idle task:
	OS_control.Current_task->task_entry();
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <RadwaRTOS_Activate_OS+0x54>)
 8000b0e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	4798      	blx	r3
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000030 	.word	0x20000030
 8000b20:	20000384 	.word	0x20000384

08000b24 <RadwaRTOS_UpdateWaiting_time>:

void RadwaRTOS_UpdateWaiting_time(){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

	for(int i =0 ; i < OS_control.ActiveTasks_Count ; i++){
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	e031      	b.n	8000b94 <RadwaRTOS_UpdateWaiting_time+0x70>
		if(OS_control.Task_table[i]->TaskState == Suspend){
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <RadwaRTOS_UpdateWaiting_time+0x84>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b38:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d126      	bne.n	8000b8e <RadwaRTOS_UpdateWaiting_time+0x6a>
			if(OS_control.Task_table[i]->Waiting_Time.blocking == enable){
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <RadwaRTOS_UpdateWaiting_time+0x84>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d11e      	bne.n	8000b8e <RadwaRTOS_UpdateWaiting_time+0x6a>
				OS_control.Task_table[i]->Waiting_Time.waiting_ticks-- ;
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <RadwaRTOS_UpdateWaiting_time+0x84>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b5a:	3a01      	subs	r2, #1
 8000b5c:	651a      	str	r2, [r3, #80]	; 0x50
				if (OS_control.Task_table[i]->Waiting_Time.waiting_ticks ==1){
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <RadwaRTOS_UpdateWaiting_time+0x84>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d110      	bne.n	8000b8e <RadwaRTOS_UpdateWaiting_time+0x6a>
					OS_control.Task_table[i]->Waiting_Time.blocking = disable ;
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <RadwaRTOS_UpdateWaiting_time+0x84>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	2201      	movs	r2, #1
 8000b76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
					OS_control.Task_table[i]->TaskState = Waiting ;
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <RadwaRTOS_UpdateWaiting_time+0x84>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b82:	2202      	movs	r2, #2
 8000b84:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					OS_SVC_SET(SVC_TaskWaitingTime);
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fd15 	bl	80005b8 <OS_SVC_SET>
	for(int i =0 ; i < OS_control.ActiveTasks_Count ; i++){
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3301      	adds	r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <RadwaRTOS_UpdateWaiting_time+0x84>)
 8000b96:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8c7      	bhi.n	8000b30 <RadwaRTOS_UpdateWaiting_time+0xc>
				}
			}
		}
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000030 	.word	0x20000030

08000bac <SysTick_Handler>:



void SysTick_Handler(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

	Systick_LED ^= 1;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <SysTick_Handler+0x24>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	f083 0301 	eor.w	r3, r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SysTick_Handler+0x24>)
 8000bbc:	701a      	strb	r2, [r3, #0]
	RadwaRTOS_UpdateWaiting_time();
 8000bbe:	f7ff ffb1 	bl	8000b24 <RadwaRTOS_UpdateWaiting_time>
	Dispatch_Next_Task();
 8000bc2:	f7ff fdcd 	bl	8000760 <Dispatch_Next_Task>
	trigger_OS_PendSV();
 8000bc6:	f7ff fbdf 	bl	8000388 <trigger_OS_PendSV>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000380 	.word	0x20000380

08000bd4 <EXTI0_IRQHandler>:





void EXTI0_IRQHandler(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<0;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <EXTI0_IRQHandler+0x14>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[0]();
 8000bde:	4b03      	ldr	r3, [pc, #12]	; (8000bec <EXTI0_IRQHandler+0x18>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4798      	blx	r3
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40010400 	.word	0x40010400
 8000bec:	200003d8 	.word	0x200003d8

08000bf0 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<1;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <EXTI1_IRQHandler+0x14>)
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[1]();
 8000bfa:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <EXTI1_IRQHandler+0x18>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	4798      	blx	r3
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40010400 	.word	0x40010400
 8000c08:	200003d8 	.word	0x200003d8

08000c0c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<2;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <EXTI2_IRQHandler+0x14>)
 8000c12:	2204      	movs	r2, #4
 8000c14:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[2]();
 8000c16:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <EXTI2_IRQHandler+0x18>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	4798      	blx	r3
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40010400 	.word	0x40010400
 8000c24:	200003d8 	.word	0x200003d8

08000c28 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<3;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <EXTI3_IRQHandler+0x14>)
 8000c2e:	2208      	movs	r2, #8
 8000c30:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[3]();
 8000c32:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <EXTI3_IRQHandler+0x18>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	4798      	blx	r3
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40010400 	.word	0x40010400
 8000c40:	200003d8 	.word	0x200003d8

08000c44 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<4;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <EXTI4_IRQHandler+0x14>)
 8000c4a:	2210      	movs	r2, #16
 8000c4c:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[4]();
 8000c4e:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <EXTI4_IRQHandler+0x18>)
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	4798      	blx	r3
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40010400 	.word	0x40010400
 8000c5c:	200003d8 	.word	0x200003d8

08000c60 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   GP_IRQ_Callback[5](); }
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <EXTI9_5_IRQHandler+0x84>)
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d005      	beq.n	8000c7c <EXTI9_5_IRQHandler+0x1c>
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <EXTI9_5_IRQHandler+0x84>)
 8000c72:	2220      	movs	r2, #32
 8000c74:	615a      	str	r2, [r3, #20]
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <EXTI9_5_IRQHandler+0x88>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   GP_IRQ_Callback[6](); }
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <EXTI9_5_IRQHandler+0x84>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d005      	beq.n	8000c94 <EXTI9_5_IRQHandler+0x34>
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <EXTI9_5_IRQHandler+0x84>)
 8000c8a:	2240      	movs	r2, #64	; 0x40
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <EXTI9_5_IRQHandler+0x88>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   GP_IRQ_Callback[7](); }
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <EXTI9_5_IRQHandler+0x84>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <EXTI9_5_IRQHandler+0x4c>
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <EXTI9_5_IRQHandler+0x84>)
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <EXTI9_5_IRQHandler+0x88>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   GP_IRQ_Callback[8](); }
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <EXTI9_5_IRQHandler+0x84>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <EXTI9_5_IRQHandler+0x66>
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <EXTI9_5_IRQHandler+0x84>)
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <EXTI9_5_IRQHandler+0x88>)
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   GP_IRQ_Callback[9](); }
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <EXTI9_5_IRQHandler+0x84>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <EXTI9_5_IRQHandler+0x80>
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <EXTI9_5_IRQHandler+0x84>)
 8000cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd8:	615a      	str	r2, [r3, #20]
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <EXTI9_5_IRQHandler+0x88>)
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cde:	4798      	blx	r3
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40010400 	.word	0x40010400
 8000ce8:	200003d8 	.word	0x200003d8

08000cec <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_Callback[10](); }
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d008      	beq.n	8000d0e <EXTI15_10_IRQHandler+0x22>
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	6153      	str	r3, [r2, #20]
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <EXTI15_10_IRQHandler+0xc0>)
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_Callback[11](); }
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d008      	beq.n	8000d2c <EXTI15_10_IRQHandler+0x40>
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d24:	6153      	str	r3, [r2, #20]
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <EXTI15_10_IRQHandler+0xc0>)
 8000d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2a:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_Callback[12](); }
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d008      	beq.n	8000d4a <EXTI15_10_IRQHandler+0x5e>
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	4a1a      	ldr	r2, [pc, #104]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d42:	6153      	str	r3, [r2, #20]
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <EXTI15_10_IRQHandler+0xc0>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_Callback[13](); }
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d008      	beq.n	8000d68 <EXTI15_10_IRQHandler+0x7c>
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <EXTI15_10_IRQHandler+0xc0>)
 8000d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d66:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_Callback[14](); }
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d008      	beq.n	8000d86 <EXTI15_10_IRQHandler+0x9a>
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7e:	6153      	str	r3, [r2, #20]
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <EXTI15_10_IRQHandler+0xc0>)
 8000d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d84:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_Callback[15](); }
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d008      	beq.n	8000da4 <EXTI15_10_IRQHandler+0xb8>
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <EXTI15_10_IRQHandler+0xbc>)
 8000d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d9c:	6153      	str	r3, [r2, #20]
 8000d9e:	4b03      	ldr	r3, [pc, #12]	; (8000dac <EXTI15_10_IRQHandler+0xc0>)
 8000da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da2:	4798      	blx	r3
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40010400 	.word	0x40010400
 8000dac:	200003d8 	.word	0x200003d8

08000db0 <Task_A>:

uint8_t TaskA_LED , TaskB_LED ,TaskC_LED ,TaskD_LED;

Mutexref mutex1 ,mutex2;
Taskref TaskA , TaskB , TaskD ,TaskC;
void Task_A(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	static uint8_t count=0;
	while(1){
		TaskA_LED ^= 1;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <Task_A+0x58>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	f083 0301 	eor.w	r3, r3, #1
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <Task_A+0x58>)
 8000dc0:	701a      	strb	r2, [r3, #0]
		count++;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <Task_A+0x5c>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <Task_A+0x5c>)
 8000dcc:	701a      	strb	r2, [r3, #0]
		if(count == 100){
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <Task_A+0x5c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b64      	cmp	r3, #100	; 0x64
 8000dd4:	d10a      	bne.n	8000dec <Task_A+0x3c>
			RadwaRTOS_ACQUIRE_MUTEX(&mutex1, &TaskA);
 8000dd6:	490e      	ldr	r1, [pc, #56]	; (8000e10 <Task_A+0x60>)
 8000dd8:	480e      	ldr	r0, [pc, #56]	; (8000e14 <Task_A+0x64>)
 8000dda:	f7ff fc89 	bl	80006f0 <RadwaRTOS_ACQUIRE_MUTEX>
			RadwaRTOS_ACTIVATE_TASK(&TaskD);
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <Task_A+0x68>)
 8000de0:	f7ff fc68 	bl	80006b4 <RadwaRTOS_ACTIVATE_TASK>
			RadwaRTOS_ACQUIRE_MUTEX(&mutex2, &TaskA);
 8000de4:	490a      	ldr	r1, [pc, #40]	; (8000e10 <Task_A+0x60>)
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <Task_A+0x6c>)
 8000de8:	f7ff fc82 	bl	80006f0 <RadwaRTOS_ACQUIRE_MUTEX>
		}
		if(count == 200){
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <Task_A+0x5c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2bc8      	cmp	r3, #200	; 0xc8
 8000df2:	d1df      	bne.n	8000db4 <Task_A+0x4>
			count =0;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <Task_A+0x5c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
			RadwaRTOS_RELEASE_MUTEX(&mutex2);
 8000dfa:	4808      	ldr	r0, [pc, #32]	; (8000e1c <Task_A+0x6c>)
 8000dfc:	f7ff fc97 	bl	800072e <RadwaRTOS_RELEASE_MUTEX>
			RadwaRTOS_RELEASE_MUTEX(&mutex1);
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <Task_A+0x64>)
 8000e02:	f7ff fc94 	bl	800072e <RadwaRTOS_RELEASE_MUTEX>
		TaskA_LED ^= 1;
 8000e06:	e7d5      	b.n	8000db4 <Task_A+0x4>
 8000e08:	20000458 	.word	0x20000458
 8000e0c:	20000024 	.word	0x20000024
 8000e10:	20000504 	.word	0x20000504
 8000e14:	2000055c 	.word	0x2000055c
 8000e18:	2000045c 	.word	0x2000045c
 8000e1c:	20000414 	.word	0x20000414

08000e20 <Task_B>:
		}
	}
}

void Task_B(void){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	static uint8_t count=0;
	while(1){
		TaskB_LED ^= 1;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <Task_B+0x44>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	f083 0301 	eor.w	r3, r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <Task_B+0x44>)
 8000e30:	701a      	strb	r2, [r3, #0]
		count++;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <Task_B+0x48>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <Task_B+0x48>)
 8000e3c:	701a      	strb	r2, [r3, #0]
		if(count == 100){
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <Task_B+0x48>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d102      	bne.n	8000e4c <Task_B+0x2c>
			RadwaRTOS_ACTIVATE_TASK(&TaskC);
 8000e46:	4809      	ldr	r0, [pc, #36]	; (8000e6c <Task_B+0x4c>)
 8000e48:	f7ff fc34 	bl	80006b4 <RadwaRTOS_ACTIVATE_TASK>
		}
		if(count == 200){
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <Task_B+0x48>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2bc8      	cmp	r3, #200	; 0xc8
 8000e52:	d1e7      	bne.n	8000e24 <Task_B+0x4>
			count =0;
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <Task_B+0x48>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
			RadwaRTOS_TERMINATE_TASK(&TaskB);
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <Task_B+0x50>)
 8000e5c:	f7ff fc39 	bl	80006d2 <RadwaRTOS_TERMINATE_TASK>
		TaskB_LED ^= 1;
 8000e60:	e7e0      	b.n	8000e24 <Task_B+0x4>
 8000e62:	bf00      	nop
 8000e64:	20000558 	.word	0x20000558
 8000e68:	20000025 	.word	0x20000025
 8000e6c:	200004b0 	.word	0x200004b0
 8000e70:	200005a0 	.word	0x200005a0

08000e74 <Task_C>:
	}
}



void Task_C(void){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	static uint8_t count=0;
	while(1){
		TaskC_LED ^= 1;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <Task_C+0x44>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	f083 0301 	eor.w	r3, r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <Task_C+0x44>)
 8000e84:	701a      	strb	r2, [r3, #0]
		count++;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <Task_C+0x48>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <Task_C+0x48>)
 8000e90:	701a      	strb	r2, [r3, #0]
		if(count == 100){
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <Task_C+0x48>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b64      	cmp	r3, #100	; 0x64
 8000e98:	d102      	bne.n	8000ea0 <Task_C+0x2c>
			RadwaRTOS_ACTIVATE_TASK(&TaskD);
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <Task_C+0x4c>)
 8000e9c:	f7ff fc0a 	bl	80006b4 <RadwaRTOS_ACTIVATE_TASK>
		}
		if(count == 200){
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <Task_C+0x48>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2bc8      	cmp	r3, #200	; 0xc8
 8000ea6:	d1e7      	bne.n	8000e78 <Task_C+0x4>
			count =0;
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <Task_C+0x48>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
			RadwaRTOS_TERMINATE_TASK(&TaskC);
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <Task_C+0x50>)
 8000eb0:	f7ff fc0f 	bl	80006d2 <RadwaRTOS_TERMINATE_TASK>
		TaskC_LED ^= 1;
 8000eb4:	e7e0      	b.n	8000e78 <Task_C+0x4>
 8000eb6:	bf00      	nop
 8000eb8:	20000459 	.word	0x20000459
 8000ebc:	20000026 	.word	0x20000026
 8000ec0:	2000045c 	.word	0x2000045c
 8000ec4:	200004b0 	.word	0x200004b0

08000ec8 <Task_D>:
		}
	}
}

void Task_D(void){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

	static uint32_t count=0;
	while(1){
		TaskD_LED ^= 1;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <Task_D+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	f083 0301 	eor.w	r3, r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <Task_D+0x58>)
 8000ed8:	701a      	strb	r2, [r3, #0]
		count++;
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <Task_D+0x5c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <Task_D+0x5c>)
 8000ee2:	6013      	str	r3, [r2, #0]
		if(count == 3){
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <Task_D+0x5c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d107      	bne.n	8000efc <Task_D+0x34>
			RadwaRTOS_ACQUIRE_MUTEX(&mutex2, &TaskD);
 8000eec:	490e      	ldr	r1, [pc, #56]	; (8000f28 <Task_D+0x60>)
 8000eee:	480f      	ldr	r0, [pc, #60]	; (8000f2c <Task_D+0x64>)
 8000ef0:	f7ff fbfe 	bl	80006f0 <RadwaRTOS_ACQUIRE_MUTEX>
			RadwaRTOS_ACQUIRE_MUTEX(&mutex1, &TaskD);
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <Task_D+0x60>)
 8000ef6:	480e      	ldr	r0, [pc, #56]	; (8000f30 <Task_D+0x68>)
 8000ef8:	f7ff fbfa 	bl	80006f0 <RadwaRTOS_ACQUIRE_MUTEX>
		}
		if(count == 200){
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <Task_D+0x5c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2bc8      	cmp	r3, #200	; 0xc8
 8000f02:	d1e3      	bne.n	8000ecc <Task_D+0x4>
			count =0;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <Task_D+0x5c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
			RadwaRTOS_RELEASE_MUTEX(&mutex2);
 8000f0a:	4808      	ldr	r0, [pc, #32]	; (8000f2c <Task_D+0x64>)
 8000f0c:	f7ff fc0f 	bl	800072e <RadwaRTOS_RELEASE_MUTEX>
			RadwaRTOS_RELEASE_MUTEX(&mutex1);
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <Task_D+0x68>)
 8000f12:	f7ff fc0c 	bl	800072e <RadwaRTOS_RELEASE_MUTEX>
			RadwaRTOS_TERMINATE_TASK(&TaskD);
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <Task_D+0x60>)
 8000f18:	f7ff fbdb 	bl	80006d2 <RadwaRTOS_TERMINATE_TASK>
		TaskD_LED ^= 1;
 8000f1c:	e7d6      	b.n	8000ecc <Task_D+0x4>
 8000f1e:	bf00      	nop
 8000f20:	20000559 	.word	0x20000559
 8000f24:	20000028 	.word	0x20000028
 8000f28:	2000045c 	.word	0x2000045c
 8000f2c:	20000414 	.word	0x20000414
 8000f30:	2000055c 	.word	0x2000055c

08000f34 <main>:
}
uint8_t payload[3] = {1,2,3} ;
uint8_t payload2[3] = {1,2,3} ;

int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	RadwaRTOS_error error;
	HW_init();
 8000f3a:	f7ff fa11 	bl	8000360 <HW_init>
	if (RadwaRTOS_Init() != no_error){
 8000f3e:	f7ff fb13 	bl	8000568 <RadwaRTOS_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d000      	beq.n	8000f4a <main+0x16>
		while(1);
 8000f48:	e7fe      	b.n	8000f48 <main+0x14>
	}

	//mutex 1
	mutex1.Payload_size = 3;
 8000f4a:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <main+0x144>)
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	601a      	str	r2, [r3, #0]
	mutex1.Payload =payload ;
 8000f50:	4b49      	ldr	r3, [pc, #292]	; (8001078 <main+0x144>)
 8000f52:	4a4a      	ldr	r2, [pc, #296]	; (800107c <main+0x148>)
 8000f54:	605a      	str	r2, [r3, #4]
	strcpy(mutex1.Mutex_name , "mutex1");
 8000f56:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <main+0x14c>)
 8000f58:	4a4a      	ldr	r2, [pc, #296]	; (8001084 <main+0x150>)
 8000f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5e:	6018      	str	r0, [r3, #0]
 8000f60:	3304      	adds	r3, #4
 8000f62:	8019      	strh	r1, [r3, #0]
 8000f64:	3302      	adds	r3, #2
 8000f66:	0c0a      	lsrs	r2, r1, #16
 8000f68:	701a      	strb	r2, [r3, #0]

	//mutex 2
	mutex2.Payload_size = 3;
 8000f6a:	4b47      	ldr	r3, [pc, #284]	; (8001088 <main+0x154>)
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	601a      	str	r2, [r3, #0]
	mutex2.Payload =payload2 ;
 8000f70:	4b45      	ldr	r3, [pc, #276]	; (8001088 <main+0x154>)
 8000f72:	4a46      	ldr	r2, [pc, #280]	; (800108c <main+0x158>)
 8000f74:	605a      	str	r2, [r3, #4]
	strcpy(mutex2.Mutex_name , "mutex2");
 8000f76:	4b46      	ldr	r3, [pc, #280]	; (8001090 <main+0x15c>)
 8000f78:	4a46      	ldr	r2, [pc, #280]	; (8001094 <main+0x160>)
 8000f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f7e:	6018      	str	r0, [r3, #0]
 8000f80:	3304      	adds	r3, #4
 8000f82:	8019      	strh	r1, [r3, #0]
 8000f84:	3302      	adds	r3, #2
 8000f86:	0c0a      	lsrs	r2, r1, #16
 8000f88:	701a      	strb	r2, [r3, #0]


	TaskA.stack_size = 1024;
 8000f8a:	4b43      	ldr	r3, [pc, #268]	; (8001098 <main+0x164>)
 8000f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f90:	601a      	str	r2, [r3, #0]
	TaskA.Priority = 4;
 8000f92:	4b41      	ldr	r3, [pc, #260]	; (8001098 <main+0x164>)
 8000f94:	2204      	movs	r2, #4
 8000f96:	741a      	strb	r2, [r3, #16]
	TaskA.task_entry = Task_A;
 8000f98:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <main+0x164>)
 8000f9a:	4a40      	ldr	r2, [pc, #256]	; (800109c <main+0x168>)
 8000f9c:	615a      	str	r2, [r3, #20]
	strcpy(TaskA.Task_name , "Task_A");
 8000f9e:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <main+0x16c>)
 8000fa0:	4a40      	ldr	r2, [pc, #256]	; (80010a4 <main+0x170>)
 8000fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa6:	6018      	str	r0, [r3, #0]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	8019      	strh	r1, [r3, #0]
 8000fac:	3302      	adds	r3, #2
 8000fae:	0c0a      	lsrs	r2, r1, #16
 8000fb0:	701a      	strb	r2, [r3, #0]

	TaskB.stack_size = 1024;
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <main+0x174>)
 8000fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb8:	601a      	str	r2, [r3, #0]
	TaskB.Priority = 3;
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <main+0x174>)
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	741a      	strb	r2, [r3, #16]
	TaskB.task_entry = Task_B;
 8000fc0:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <main+0x174>)
 8000fc2:	4a3a      	ldr	r2, [pc, #232]	; (80010ac <main+0x178>)
 8000fc4:	615a      	str	r2, [r3, #20]
	strcpy(TaskB.Task_name , "Task_B");
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <main+0x17c>)
 8000fc8:	4a3a      	ldr	r2, [pc, #232]	; (80010b4 <main+0x180>)
 8000fca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fce:	6018      	str	r0, [r3, #0]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	8019      	strh	r1, [r3, #0]
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	0c0a      	lsrs	r2, r1, #16
 8000fd8:	701a      	strb	r2, [r3, #0]

	TaskC.stack_size = 1024;
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <main+0x184>)
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	601a      	str	r2, [r3, #0]
	TaskC.Priority = 2;
 8000fe2:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <main+0x184>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	741a      	strb	r2, [r3, #16]
	TaskC.task_entry = Task_C;
 8000fe8:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <main+0x184>)
 8000fea:	4a34      	ldr	r2, [pc, #208]	; (80010bc <main+0x188>)
 8000fec:	615a      	str	r2, [r3, #20]
	strcpy(TaskC.Task_name , "Task_C");
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <main+0x18c>)
 8000ff0:	4a34      	ldr	r2, [pc, #208]	; (80010c4 <main+0x190>)
 8000ff2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff6:	6018      	str	r0, [r3, #0]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	8019      	strh	r1, [r3, #0]
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	0c0a      	lsrs	r2, r1, #16
 8001000:	701a      	strb	r2, [r3, #0]

	TaskD.stack_size = 1024;
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <main+0x194>)
 8001004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001008:	601a      	str	r2, [r3, #0]
	TaskD.Priority = 1;
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <main+0x194>)
 800100c:	2201      	movs	r2, #1
 800100e:	741a      	strb	r2, [r3, #16]
	TaskD.task_entry = Task_D;
 8001010:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <main+0x194>)
 8001012:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <main+0x198>)
 8001014:	615a      	str	r2, [r3, #20]
	strcpy(TaskD.Task_name , "Task_D");
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <main+0x19c>)
 8001018:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <main+0x1a0>)
 800101a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101e:	6018      	str	r0, [r3, #0]
 8001020:	3304      	adds	r3, #4
 8001022:	8019      	strh	r1, [r3, #0]
 8001024:	3302      	adds	r3, #2
 8001026:	0c0a      	lsrs	r2, r1, #16
 8001028:	701a      	strb	r2, [r3, #0]

	error += RadwaRTOS_CREATE_TASK(&TaskA);
 800102a:	481b      	ldr	r0, [pc, #108]	; (8001098 <main+0x164>)
 800102c:	f7ff fa08 	bl	8000440 <RadwaRTOS_CREATE_TASK>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4413      	add	r3, r2
 8001038:	71fb      	strb	r3, [r7, #7]
	error += RadwaRTOS_CREATE_TASK(&TaskB);
 800103a:	481b      	ldr	r0, [pc, #108]	; (80010a8 <main+0x174>)
 800103c:	f7ff fa00 	bl	8000440 <RadwaRTOS_CREATE_TASK>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	4413      	add	r3, r2
 8001048:	71fb      	strb	r3, [r7, #7]
	error += RadwaRTOS_CREATE_TASK(&TaskC);
 800104a:	481b      	ldr	r0, [pc, #108]	; (80010b8 <main+0x184>)
 800104c:	f7ff f9f8 	bl	8000440 <RadwaRTOS_CREATE_TASK>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4413      	add	r3, r2
 8001058:	71fb      	strb	r3, [r7, #7]
	error += RadwaRTOS_CREATE_TASK(&TaskD);
 800105a:	481b      	ldr	r0, [pc, #108]	; (80010c8 <main+0x194>)
 800105c:	f7ff f9f0 	bl	8000440 <RadwaRTOS_CREATE_TASK>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4413      	add	r3, r2
 8001068:	71fb      	strb	r3, [r7, #7]

	RadwaRTOS_ACTIVATE_TASK(&TaskA);
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <main+0x164>)
 800106c:	f7ff fb22 	bl	80006b4 <RadwaRTOS_ACTIVATE_TASK>


	RadwaRTOS_Activate_OS();
 8001070:	f7ff fd2a 	bl	8000ac8 <RadwaRTOS_Activate_OS>
	while(1){
 8001074:	e7fe      	b.n	8001074 <main+0x140>
 8001076:	bf00      	nop
 8001078:	2000055c 	.word	0x2000055c
 800107c:	20000000 	.word	0x20000000
 8001080:	2000056c 	.word	0x2000056c
 8001084:	08001198 	.word	0x08001198
 8001088:	20000414 	.word	0x20000414
 800108c:	20000004 	.word	0x20000004
 8001090:	20000424 	.word	0x20000424
 8001094:	080011a0 	.word	0x080011a0
 8001098:	20000504 	.word	0x20000504
 800109c:	08000db1 	.word	0x08000db1
 80010a0:	2000051c 	.word	0x2000051c
 80010a4:	080011a8 	.word	0x080011a8
 80010a8:	200005a0 	.word	0x200005a0
 80010ac:	08000e21 	.word	0x08000e21
 80010b0:	200005b8 	.word	0x200005b8
 80010b4:	080011b0 	.word	0x080011b0
 80010b8:	200004b0 	.word	0x200004b0
 80010bc:	08000e75 	.word	0x08000e75
 80010c0:	200004c8 	.word	0x200004c8
 80010c4:	080011b8 	.word	0x080011b8
 80010c8:	2000045c 	.word	0x2000045c
 80010cc:	08000ec9 	.word	0x08000ec9
 80010d0:	20000474 	.word	0x20000474
 80010d4:	080011c0 	.word	0x080011c0

080010d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopForever+0xe>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopForever+0x16>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001106:	f000 f811 	bl	800112c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110a:	f7ff ff13 	bl	8000f34 <main>

0800110e <LoopForever>:

LoopForever:
    b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
  ldr   r0, =_estack
 8001110:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800111c:	080011d0 	.word	0x080011d0
  ldr r2, =_sbss
 8001120:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001124:	200005f4 	.word	0x200005f4

08001128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_2_IRQHandler>
	...

0800112c <__libc_init_array>:
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	2500      	movs	r5, #0
 8001130:	4e0c      	ldr	r6, [pc, #48]	; (8001164 <__libc_init_array+0x38>)
 8001132:	4c0d      	ldr	r4, [pc, #52]	; (8001168 <__libc_init_array+0x3c>)
 8001134:	1ba4      	subs	r4, r4, r6
 8001136:	10a4      	asrs	r4, r4, #2
 8001138:	42a5      	cmp	r5, r4
 800113a:	d109      	bne.n	8001150 <__libc_init_array+0x24>
 800113c:	f000 f81a 	bl	8001174 <_init>
 8001140:	2500      	movs	r5, #0
 8001142:	4e0a      	ldr	r6, [pc, #40]	; (800116c <__libc_init_array+0x40>)
 8001144:	4c0a      	ldr	r4, [pc, #40]	; (8001170 <__libc_init_array+0x44>)
 8001146:	1ba4      	subs	r4, r4, r6
 8001148:	10a4      	asrs	r4, r4, #2
 800114a:	42a5      	cmp	r5, r4
 800114c:	d105      	bne.n	800115a <__libc_init_array+0x2e>
 800114e:	bd70      	pop	{r4, r5, r6, pc}
 8001150:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001154:	4798      	blx	r3
 8001156:	3501      	adds	r5, #1
 8001158:	e7ee      	b.n	8001138 <__libc_init_array+0xc>
 800115a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800115e:	4798      	blx	r3
 8001160:	3501      	adds	r5, #1
 8001162:	e7f2      	b.n	800114a <__libc_init_array+0x1e>
 8001164:	080011c8 	.word	0x080011c8
 8001168:	080011c8 	.word	0x080011c8
 800116c:	080011c8 	.word	0x080011c8
 8001170:	080011cc 	.word	0x080011cc

08001174 <_init>:
 8001174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001176:	bf00      	nop
 8001178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800117a:	bc08      	pop	{r3}
 800117c:	469e      	mov	lr, r3
 800117e:	4770      	bx	lr

08001180 <_fini>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	bf00      	nop
 8001184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001186:	bc08      	pop	{r3}
 8001188:	469e      	mov	lr, r3
 800118a:	4770      	bx	lr
